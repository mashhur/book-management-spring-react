{"ast":null,"code":"var _jsxFileName = \"/Users/qazi-amaan/Documents/mini-project/react-admin/src/components/_dashboard/app/AppTasks.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from \"prop-types\";\nimport { Form, FormikProvider, useFormik } from \"formik\"; // material\n\nimport { Box, Card, Checkbox, CardHeader, Typography, FormControlLabel, Stack } from \"@mui/material\"; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TASKS = [\"Pass college\", \"Get Internship\", \"Training\", \"Final Project\", \"Start actual Work\", \"Go on trips\"]; // ----------------------------------------------------------------------\n\nTaskItem.propTypes = {\n  task: PropTypes.string,\n  checked: PropTypes.bool,\n  formik: PropTypes.object\n};\n\nfunction TaskItem({\n  task,\n  checked,\n  formik,\n  ...other\n}) {\n  const {\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"row\",\n    justifyContent: \"space-between\",\n    sx: {\n      py: 0.75\n    },\n    children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n      control: /*#__PURE__*/_jsxDEV(Checkbox, { ...getFieldProps(\"checked\"),\n        value: task,\n        checked: checked,\n        ...other\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }, this),\n      label: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: { ...(checked && {\n            color: \"text.disabled\",\n            textDecoration: \"line-through\"\n          })\n        },\n        children: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 3\n  }, this);\n}\n\n_c = TaskItem;\nexport default function AppTasks() {\n  _s();\n\n  const formik = useFormik({\n    initialValues: {\n      checked: [TASKS[0], TASKS[1], TASKS[2], TASKS[3], TASKS[4]]\n    },\n    onSubmit: values => {\n      console.log(values);\n    }\n  });\n  const {\n    values,\n    handleSubmit\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        px: 3,\n        py: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          noValidate: true,\n          onSubmit: handleSubmit,\n          children: TASKS.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n            task: task,\n            formik: formik,\n            checked: values.checked.includes(task)\n          }, task, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 8\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 3\n  }, this);\n}\n\n_s(AppTasks, \"B/4rI4IXClQ7sG7psKj+pOuRe5Q=\", false, function () {\n  return [useFormik];\n});\n\n_c2 = AppTasks;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TaskItem\");\n$RefreshReg$(_c2, \"AppTasks\");","map":{"version":3,"sources":["/Users/qazi-amaan/Documents/mini-project/react-admin/src/components/_dashboard/app/AppTasks.js"],"names":["PropTypes","Form","FormikProvider","useFormik","Box","Card","Checkbox","CardHeader","Typography","FormControlLabel","Stack","TASKS","TaskItem","propTypes","task","string","checked","bool","formik","object","other","getFieldProps","py","color","textDecoration","AppTasks","initialValues","onSubmit","values","console","log","handleSubmit","px","map","includes"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\n// material\nimport {\n\tBox,\n\tCard,\n\tCheckbox,\n\tCardHeader,\n\tTypography,\n\tFormControlLabel,\n\tStack,\n} from \"@mui/material\";\n\n// ----------------------------------------------------------------------\n\nconst TASKS = [\n\t\"Pass college\",\n\t\"Get Internship\",\n\t\"Training\",\n\t\"Final Project\",\n\t\"Start actual Work\",\n\t\"Go on trips\",\n];\n\n// ----------------------------------------------------------------------\n\nTaskItem.propTypes = {\n\ttask: PropTypes.string,\n\tchecked: PropTypes.bool,\n\tformik: PropTypes.object,\n};\n\nfunction TaskItem({ task, checked, formik, ...other }) {\n\tconst { getFieldProps } = formik;\n\n\treturn (\n\t\t<Stack\n\t\t\tdirection=\"row\"\n\t\t\tjustifyContent=\"space-between\"\n\t\t\tsx={{ py: 0.75 }}>\n\t\t\t<FormControlLabel\n\t\t\t\tcontrol={\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t{...getFieldProps(\"checked\")}\n\t\t\t\t\t\tvalue={task}\n\t\t\t\t\t\tchecked={checked}\n\t\t\t\t\t\t{...other}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\tlabel={\n\t\t\t\t\t<Typography\n\t\t\t\t\t\tvariant=\"body2\"\n\t\t\t\t\t\tsx={{\n\t\t\t\t\t\t\t...(checked && {\n\t\t\t\t\t\t\t\tcolor: \"text.disabled\",\n\t\t\t\t\t\t\t\ttextDecoration: \"line-through\",\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{task}\n\t\t\t\t\t</Typography>\n\t\t\t\t}\n\t\t\t/>\n\t\t</Stack>\n\t);\n}\n\nexport default function AppTasks() {\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\tchecked: [\n\t\t\t\tTASKS[0],\n\t\t\t\tTASKS[1],\n\t\t\t\tTASKS[2],\n\t\t\t\tTASKS[3],\n\t\t\t\tTASKS[4],\n\t\t\t],\n\t\t},\n\t\tonSubmit: (values) => {\n\t\t\tconsole.log(values);\n\t\t},\n\t});\n\n\tconst { values, handleSubmit } = formik;\n\n\treturn (\n\t\t<Card>\n\t\t\t<CardHeader title=\"Tasks\" />\n\t\t\t<Box sx={{ px: 3, py: 1 }}>\n\t\t\t\t<FormikProvider value={formik}>\n\t\t\t\t\t<Form\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tnoValidate\n\t\t\t\t\t\tonSubmit={handleSubmit}>\n\t\t\t\t\t\t{TASKS.map((task) => (\n\t\t\t\t\t\t\t<TaskItem\n\t\t\t\t\t\t\t\tkey={task}\n\t\t\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\t\t\tformik={formik}\n\t\t\t\t\t\t\t\tchecked={values.checked.includes(task)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Form>\n\t\t\t\t</FormikProvider>\n\t\t\t</Box>\n\t\t</Card>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}