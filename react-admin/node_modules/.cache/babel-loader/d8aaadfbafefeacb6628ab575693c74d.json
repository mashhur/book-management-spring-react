{"ast":null,"code":"var _jsxFileName = \"/Users/qazi-amaan/Documents/mini-project/react-admin/src/components/admin/register/index.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminRegisterForm({\n  inititalState,\n  onSubmit\n}) {\n  _s();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Username required'),\n    password: Yup.string().required('Password is required')\n  });\n  const formik = useFormik({\n    initialValues: inititalState,\n    validationSchema: RegisterSchema,\n    onSubmit: values => {\n      onSubmit(values);\n    }\n  });\n  const {\n    errors,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"username\",\n          type: \"text\",\n          label: \"Username\",\n          ...getFieldProps('username'),\n          error: Boolean(touched.username && errors.username),\n          helperText: touched.username && errors.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          autoComplete: \"current-password\",\n          type: showPassword ? 'text' : 'password',\n          label: \"Password\",\n          ...getFieldProps('password'),\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsxDEV(IconButton, {\n                edge: \"end\",\n                onClick: () => setShowPassword(prev => !prev),\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  icon: showPassword ? eyeFill : eyeOffFill\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 53,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          },\n          error: Boolean(touched.password && errors.password),\n          helperText: touched.password && errors.password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminRegisterForm, \"NHvwTgWisXmYcXpq6XbEDoaa5a0=\", false, function () {\n  return [useFormik];\n});\n\n_c = AdminRegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRegisterForm\");","map":{"version":3,"sources":["/Users/qazi-amaan/Documents/mini-project/react-admin/src/components/admin/register/index.js"],"names":["Yup","useState","Icon","useFormik","Form","FormikProvider","eyeFill","eyeOffFill","Stack","TextField","IconButton","InputAdornment","LoadingButton","AdminRegisterForm","inititalState","onSubmit","showPassword","setShowPassword","RegisterSchema","object","shape","username","string","min","max","required","password","formik","initialValues","validationSchema","values","errors","touched","handleSubmit","isSubmitting","getFieldProps","Boolean","endAdornment","prev"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,cAA1B,QAAgD,QAAhD;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,UAA3B,EAAuCC,cAAvC,QAA6D,eAA7D;AACA,SAASC,aAAT,QAA8B,UAA9B;;AAEA,eAAe,SAASC,iBAAT,CAA2B;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAA3B,EAAwD;AAAA;;AACrE,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMiB,cAAc,GAAGlB,GAAG,CAACmB,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,QAAQ,EAAErB,GAAG,CAACsB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,YAApB,EAAkCC,GAAlC,CAAsC,EAAtC,EAA0C,WAA1C,EAAuDC,QAAvD,CAAgE,mBAAhE,CAD8B;AAExCC,IAAAA,QAAQ,EAAE1B,GAAG,CAACsB,MAAJ,GAAaG,QAAb,CAAsB,sBAAtB;AAF8B,GAAnB,CAAvB;AAKA,QAAME,MAAM,GAAGxB,SAAS,CAAC;AACvByB,IAAAA,aAAa,EAAEd,aADQ;AAEvBe,IAAAA,gBAAgB,EAAEX,cAFK;AAGvBH,IAAAA,QAAQ,EAAGe,MAAD,IAAY;AACpBf,MAAAA,QAAQ,CAACe,MAAD,CAAR;AACD;AALsB,GAAD,CAAxB;AAQA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,OAAV;AAAmBC,IAAAA,YAAnB;AAAiCC,IAAAA,YAAjC;AAA+CC,IAAAA;AAA/C,MAAiER,MAAvE;AAEA,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,MAAvB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,YAAY,EAAC,KAAnB;AAAyB,MAAA,UAAU,MAAnC;AAAoC,MAAA,QAAQ,EAAEM,YAA9C;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAE,CAAhB;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,YAAY,EAAC,UAFf;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,KAAK,EAAC,UAJR;AAAA,aAKME,aAAa,CAAC,UAAD,CALnB;AAME,UAAA,KAAK,EAAEC,OAAO,CAACJ,OAAO,CAACX,QAAR,IAAoBU,MAAM,CAACV,QAA5B,CANhB;AAOE,UAAA,UAAU,EAAEW,OAAO,CAACX,QAAR,IAAoBU,MAAM,CAACV;AAPzC;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,SAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,YAAY,EAAC,kBAFf;AAGE,UAAA,IAAI,EAAEL,YAAY,GAAG,MAAH,GAAY,UAHhC;AAIE,UAAA,KAAK,EAAC,UAJR;AAAA,aAKMmB,aAAa,CAAC,UAAD,CALnB;AAME,UAAA,UAAU,EAAE;AACVE,YAAAA,YAAY,eACV,QAAC,cAAD;AAAgB,cAAA,QAAQ,EAAC,KAAzB;AAAA,qCACE,QAAC,UAAD;AAAY,gBAAA,IAAI,EAAC,KAAjB;AAAuB,gBAAA,OAAO,EAAE,MAAMpB,eAAe,CAAEqB,IAAD,IAAU,CAACA,IAAZ,CAArD;AAAA,uCACE,QAAC,IAAD;AAAM,kBAAA,IAAI,EAAEtB,YAAY,GAAGV,OAAH,GAAaC;AAArC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFQ,WANd;AAeE,UAAA,KAAK,EAAE6B,OAAO,CAACJ,OAAO,CAACN,QAAR,IAAoBK,MAAM,CAACL,QAA5B,CAfhB;AAgBE,UAAA,UAAU,EAAEM,OAAO,CAACN,QAAR,IAAoBK,MAAM,CAACL;AAhBzC;AAAA;AAAA;AAAA;AAAA,gBAXF,eA8BE,QAAC,aAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,OAAO,EAAC,WAJV;AAKE,UAAA,OAAO,EAAEQ,YALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GAhEuBrB,iB;UAQPV,S;;;KAROU,iB","sourcesContent":["import * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport { useFormik, Form, FormikProvider } from 'formik';\nimport eyeFill from '@iconify/icons-eva/eye-fill';\nimport eyeOffFill from '@iconify/icons-eva/eye-off-fill';\n\nimport { Stack, TextField, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\nexport default function AdminRegisterForm({ inititalState, onSubmit }) {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const RegisterSchema = Yup.object().shape({\n    username: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Username required'),\n    password: Yup.string().required('Password is required')\n  });\n\n  const formik = useFormik({\n    initialValues: inititalState,\n    validationSchema: RegisterSchema,\n    onSubmit: (values) => {\n      onSubmit(values);\n    }\n  });\n\n  const { errors, touched, handleSubmit, isSubmitting, getFieldProps } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\n        <Stack spacing={3}>\n          <TextField\n            fullWidth\n            autoComplete=\"username\"\n            type=\"text\"\n            label=\"Username\"\n            {...getFieldProps('username')}\n            error={Boolean(touched.username && errors.username)}\n            helperText={touched.username && errors.username}\n          />\n\n          <TextField\n            fullWidth\n            autoComplete=\"current-password\"\n            type={showPassword ? 'text' : 'password'}\n            label=\"Password\"\n            {...getFieldProps('password')}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <IconButton edge=\"end\" onClick={() => setShowPassword((prev) => !prev)}>\n                    <Icon icon={showPassword ? eyeFill : eyeOffFill} />\n                  </IconButton>\n                </InputAdornment>\n              )\n            }}\n            error={Boolean(touched.password && errors.password)}\n            helperText={touched.password && errors.password}\n          />\n\n          <LoadingButton\n            fullWidth\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            loading={isSubmitting}\n          >\n            Save\n          </LoadingButton>\n        </Stack>\n      </Form>\n    </FormikProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}